---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cutting-Edge AppSync'
Parameters:
  EnviromentPrefix:
    Type: String
    Default: ''
Resources:
  GraphQLApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'appsync.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ServiceRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
  GraphQLApi:
    Type: 'AWS::AppSync::GraphQLApi'
    Properties:
      Name: !Sub '${EnviromentPrefix}-api'
      AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt 'GraphQLApiRole.Arn'
        FieldLogLevel: ALL
  ApiKey:
    Type: 'AWS::AppSync::ApiKey'
    Properties:
      Expires: 1577750400
      ApiId: !GetAtt 'GraphQLApi.ApiId'
  GraphQLSchema:
    Type: 'AWS::AppSync::GraphQLSchema'
    Properties:
      DefinitionS3Location: './schema.sdl'
      ApiId: !GetAtt 'GraphQLApi.ApiId'
  VoteTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: service
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: service
        KeyType: HASH
  VoteRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'appsync.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ServiceRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'dynamodb:DeleteItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:UpdateItem'
            Resource:
            - !GetAtt VoteTable.Arn
            - !Sub '${VoteTable.Arn}/*'
  ServicesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'appsync.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ServiceRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource: !GetAtt ServicesFunction.Arn
  ServicesFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
            Effect: 'Allow'
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
  ServicesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.handler'
      Runtime: 'nodejs12.x'
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt 'ServicesFunctionRole.Arn'
      Code:
        ZipFile: |
          'use strict';
          exports.handler = async (event, context) => {
            return {
              items: [
                {type: "ec2", name: "ec2"},
                {type: "lambda", name: "lambda"},
                {type: "fargate", name: "fargate"},
                {type: "clb", name: "clb"},
                {type: "nlb", name: "nlb"},
                {type: "alb", name: "alb"},
                {type: "appsync", name: "appsync"},
                {type: "apigateway", name: "apigateway"},
                {type: "eks", name: "eks"},
                {type: "ecs", name: "ecs"},
                {type: "rds_aurora", name: "rds_aurora"},
                {type: "rds_postgres", name: "rds_postgres"},
                {type: "rds_mysql", name: "rds_mysql"},
                {type: "rds_mariadb", name: "rds_mariadb"},
                {type: "dynamodb", name: "dynamodb"},
                {type: "s3", name: "s3"},
                {type: "efs", name: "efs"},
                {type: "ebs", name: "ebs"}
              ]};
          };
  VoteDataSource:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt 'VoteRole.Arn'
      ApiId: !GetAtt 'GraphQLApi.ApiId'
      Name: vote
      DynamoDBConfig:
        TableName: !Ref VoteTable
        AwsRegion: !Ref 'AWS::Region'
  ServicesDataSource:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt 'ServicesRole.Arn'
      ApiId: !GetAtt 'GraphQLApi.ApiId'
      Name: service
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ServicesFunction.Arn
  VoteResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      TypeName: Mutation
      DataSourceName: !GetAtt 'VoteDataSource.Name'
      RequestMappingTemplateS3Location: './vote-request.vtl'
      ResponseMappingTemplateS3Location: './vote-response.vtl'
      ApiId: !GetAtt 'GraphQLApi.ApiId'
      FieldName: vote
  VotingResultsResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      TypeName: Query
      DataSourceName: !GetAtt 'VoteDataSource.Name'
      RequestMappingTemplateS3Location: './getVotingResults-request.vtl'
      ResponseMappingTemplateS3Location: './getVotingResults-response.vtl'
      ApiId: !GetAtt 'GraphQLApi.ApiId'
      FieldName: getVotingResults
  ServicesResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      TypeName: Query
      DataSourceName: !GetAtt 'ServicesDataSource.Name'
      RequestMappingTemplateS3Location: './getServices-request.vtl'
      ResponseMappingTemplateS3Location: './getServices-response.vtl'
      ApiId: !GetAtt 'GraphQLApi.ApiId'
      FieldName: getServices
Outputs:
  GraphQLUrl:
    Value: !GetAtt 'GraphQLApi.GraphQLUrl'
  ApiId:
    Value: !GetAtt 'GraphQLApi.ApiId'
  ApiKey:
    Value: !GetAtt 'ApiKey.ApiKey'
